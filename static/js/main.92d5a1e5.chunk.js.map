{"version":3,"sources":["components/FormPanel.jsx","components/Company.jsx","components/ResultsPanel.jsx","pages/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FormPanel","guidValue","queryValue","handleSubmit","onSubmit","e","className","type","ref","required","Company","companyData","useState","isHidden","setIsHidden","onClick","Name","EntityName","stopPropagation","ignoreParentClick","Object","keys","map","key","ResultsPanel","data","createUniqueKey","length","current","value","company","Home","useRef","setData","isError","setIsError","isLoading","setIsLoading","nameOrABNQueryURL","removeString","url","query","guid","Number","fetchData","Headers","append","fetch","then","response","text","result","hash","replace","slice","JSON","parse","Names","catch","err","console","log","finally","preventDefault","Abn","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92d5a1e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './formPanel.scss';\r\n\r\nconst FormPanel = ({ guidValue, queryValue, handleSubmit }) => {\r\n\treturn (\r\n\t\t<form onSubmit={(e) => handleSubmit(e)}>\r\n\t\t\t<div className=\"container-input\">\r\n\t\t\t\t<label>GUID KEY</label>\r\n\t\t\t\t<input type=\"text\" ref={guidValue} required />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"container-input\">\r\n\t\t\t\t<label>SEARCH</label>\r\n\t\t\t\t<input type=\"text\" ref={queryValue} required />\r\n\t\t\t</div>\r\n\t\t\t<button type=\"submit\">SUBMIT</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nFormPanel.propTypes = {\r\n\tguidValue: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\tqueryValue: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\thandleSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FormPanel;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './company.scss';\r\n\r\nconst Company = ({ companyData }) => {\r\n\tconst [ isHidden, setIsHidden ] = useState(true);\r\n\r\n\tconst ignoreParentClick = (e) => {\r\n\t\te.stopPropagation();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<li className=\"company-title\" onClick={() => setIsHidden(!isHidden)}>\r\n\t\t\t{companyData.Name ? companyData.Name : companyData.EntityName}\r\n\t\t\t<span className=\"toggle-icon\">{isHidden ? '+' : '-'}</span>\r\n\r\n\t\t\t{!isHidden ? (\r\n\t\t\t\t<ul onClick={(e) => ignoreParentClick(e)}>\r\n\t\t\t\t\t{Object.keys(companyData).map((key) => (\r\n\t\t\t\t\t\t<li className=\"company-details\" key={`${key} ${companyData[key]}`}>\r\n\t\t\t\t\t\t\t{key}: {companyData[key]}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t) : null}\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nCompany.propTypes = {\r\n\tcompanyData: PropTypes.objectOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Company;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nimport Company from './Company';\r\nimport './resultsPanel.scss'\r\n\r\nconst ResultsPanel = ({data, queryValue, createUniqueKey})=> {\r\n    return (\r\n        <>\r\n            {data ? \r\n                <div className=\"results-container\">\r\n                    <p className=\"query-message\">{data.length} RESULT{data.length !== 1? \"S\": null} FOR <span className=\"query\">\"{queryValue.current.value}\"</span></p>\r\n                    <ul>\r\n                        {data.map(company => <Company companyData={company} key={createUniqueKey(company)} />)}\r\n                    </ul>\r\n                </div>\r\n            : null}\r\n        </>    \r\n    )\r\n}\r\n\r\nResultsPanel.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    queryValue: PropTypes.object.isRequired,\r\n    createUniqueKey: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ResultsPanel\r\n","import React, { useState, useRef } from 'react';\r\n\r\nimport FormPanel from '../components/FormPanel';\r\nimport ResultsPanel from '../components/ResultsPanel';\r\nimport './home.scss';\r\n\r\nconst Home = () => {\r\n\tconst guidValue = useRef('');\r\n\tconst queryValue = useRef('');\r\n\tconst [ data, setData ] = useState(null);\r\n\tconst [ isError, setIsError ] = useState(false);\r\n\tconst [ isLoading, setIsLoading ] = useState(false);\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconsole.log('submitting...');\r\n\t\tsetIsLoading(true);\r\n\t\tnameOrABNQueryURL();\r\n\t};\r\n\r\n\tconst nameOrABNQueryURL = () => {\r\n\t\tlet query = queryValue.current.value;\r\n\t\tlet guid = guidValue.current.value;\r\n\t\tlet removeString;\r\n\t\tlet url;\r\n\r\n\t\tif (typeof Number(query) === 'number' && query.length === 11) {\r\n\t\t\turl = `AbnDetails.aspx?callback=callback&abn=${query}&guid=${guid}`;\r\n\t\t\tremoveString = 'callback(';\r\n\t\t} else {\r\n\t\t\turl = `MatchingNames.aspx?callback=nameCallback&name=${query}&guid=${guid}`;\r\n\t\t\tremoveString = 'nameCallback(';\r\n\t\t}\r\n\t\tfetchData(url, removeString);\r\n\t};\r\n\r\n\tconst fetchData = (url, removeString) => {\r\n\t\tconst myHeaders = new Headers();\r\n\t\tmyHeaders.append('Content-Type', 'text/plain; charset=ISO-8859-1');\r\n\r\n\t\tfetch(`https://abr.business.gov.au/json/${url}`)\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.text();\r\n\t\t\t})\r\n\t\t\t.then((result) => {\r\n\t\t\t\tlet hash = result.replace(removeString, '').slice(0, -1);\r\n\t\t\t\thash = JSON.parse(hash);\r\n\t\t\t\tremoveString === 'nameCallback(' ? setData(hash.Names) : setData([ hash ]);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t\tsetIsError(true);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst createUniqueKey = (company) => {\r\n\t\treturn company.Name ? `${company.Name}${company.Abn}` : `${company.EntityName}${company.Abn}`;\r\n\t};\r\n\r\n\treturn (\r\n        <>\r\n            <div className=\"homepage-container\">\r\n                <h1 className=\"homepage-title\">ABN LOOKUP</h1>\r\n\r\n                <p className=\"homepage-description\">Search by ABN or name. You will need a GUID key to search.</p>\r\n\r\n                <FormPanel isError={isError} guidValue={guidValue} queryValue={queryValue} handleSubmit={handleSubmit} />\r\n\r\n                {isError ? <p className=\"error-message\">GUID Key is incorrect, please check again</p> : null}\r\n            </div>\r\n            <>\r\n                {isLoading ? \r\n                    <h2>LOADING...</h2> : <ResultsPanel data={data} queryValue={queryValue} createUniqueKey={createUniqueKey} />}\r\n            </>\r\n        </>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nimport Home from './pages/Home';\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Home />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}