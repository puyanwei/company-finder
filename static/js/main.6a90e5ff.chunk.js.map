{"version":3,"sources":["components/FormPanel.jsx","components/Company.jsx","components/ResultsPanel.jsx","pages/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FormPanel","handleSubmit","handleKeyPress","onSubmit","e","className","type","name","onChange","required","Company","companyData","useState","isHidden","setIsHidden","onClick","Name","EntityName","stopPropagation","ignoreParentClick","Object","keys","map","key","ResultsPanel","data","queryValue","createUniqueKey","length","company","defaultProps","Home","guid","query","formInput","setFormInput","isError","isLoading","state","setState","formData","setFormData","nameOrABNQueryURL","removeString","url","Number","fetchData","Headers","append","fetch","then","response","text","result","hash","replace","slice","JSON","parse","Names","catch","err","console","log","finally","preventDefault","target","value","Abn","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a90e5ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './formPanel.scss';\r\n\r\nconst FormPanel = ({ handleSubmit, handleKeyPress }) => {\r\n\treturn (\r\n\t\t<form onSubmit={(e) => handleSubmit(e)}>\r\n\t\t\t<div className=\"container-input\">\r\n\t\t\t\t<label>GUID KEY</label>\r\n\t\t\t\t<input type=\"text\" name=\"guid\" onChange={(e) => handleKeyPress(e)} required />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"container-input\">\r\n\t\t\t\t<label>SEARCH</label>\r\n\t\t\t\t<input type=\"text\" name=\"query\" onChange={(e) => handleKeyPress(e)} required />\r\n\t\t\t</div>\r\n\t\t\t<button type=\"submit\">SUBMIT</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nFormPanel.propTypes = {\r\n\thandleSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FormPanel;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './company.scss';\r\n\r\nconst Company = ({ companyData }) => {\r\n\tconst [ isHidden, setIsHidden ] = useState(true);\r\n\r\n\tconst ignoreParentClick = (e) => {\r\n\t\te.stopPropagation();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<li className=\"company-title\" onClick={() => setIsHidden(!isHidden)}>\r\n\t\t\t{companyData.Name || companyData.EntityName}\r\n\t\t\t<span className=\"toggle-icon\">{isHidden ? '+' : '-'}</span>\r\n\r\n\t\t\t{!isHidden ? (\r\n\t\t\t\t<ul onClick={(e) => ignoreParentClick(e)}>\r\n\t\t\t\t\t{Object.keys(companyData).map((key) => (\r\n\t\t\t\t\t\t<li className=\"company-details\" key={`${key} ${companyData[key]}`}>\r\n\t\t\t\t\t\t\t{key}: {companyData[key]}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t) : null}\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nCompany.propTypes = {\r\n\tcompanyData: PropTypes.objectOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Company;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nimport Company from './Company';\r\nimport './resultsPanel.scss'\r\n\r\nconst ResultsPanel = ({ data, queryValue, createUniqueKey }) => {\r\n    \r\n    return (\r\n        <>\r\n            {data ? \r\n                <div className=\"results-container\">\r\n                    <p className=\"query-message\">{data.length} RESULT{data.length !== 1? \"S\": null} FOR <span className=\"query\">\"{queryValue}\"</span></p>\r\n                    <ul>\r\n                        {data.map(company => <Company companyData={company} key={createUniqueKey(company)} />)}\r\n                    </ul>\r\n                </div>\r\n            : null}\r\n        </>    \r\n    )\r\n}\r\n\r\nResultsPanel.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.object),\r\n    queryValue: PropTypes.object.isRequired,\r\n    createUniqueKey: PropTypes.func.isRequired\r\n};\r\n\r\nResultsPanel.defaultProps = {\r\n    data: null\r\n}\r\n\r\nexport default ResultsPanel\r\n","import React, { useState } from 'react';\r\n\r\nimport FormPanel from '../components/FormPanel';\r\nimport ResultsPanel from '../components/ResultsPanel';\r\nimport './home.scss';\r\n\r\nconst Home = () => {\r\n    const [ formInput, setFormInput ] = useState({ guid: \"\", query: \"\" });\r\n    const [ state, setState ] = useState({ isError:false, isLoading: false });\r\n    const [ formData, setFormData ] = useState(null);\r\n\r\n    const { isError, isLoading } = state\r\n    const { guid, query } = formInput\r\n\r\n    const handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconsole.log('submitting...');\r\n\t\tsetState({ ...state, isLoading: true });\r\n\t\tnameOrABNQueryURL();\r\n    };\r\n    \r\n    const handleKeyPress = (e) => {\r\n        const {name, value} = e.target;\r\n        name === \"guid\"\r\n            ?\r\n            setFormInput({ ...formInput, guid: value })\r\n            : setFormInput({ ...formInput, query: value })\r\n    }\r\n\r\n\tconst nameOrABNQueryURL = () => {\r\n\t\tlet removeString;\r\n\t\tlet url;\r\n\r\n\t\tif (typeof Number(query) === 'number' && query.length === 11) {\r\n\t\t\turl = `AbnDetails.aspx?callback=callback&abn=${query}&guid=${guid}`;\r\n\t\t\tremoveString = 'callback(';\r\n\t\t} else {\r\n\t\t\turl = `MatchingNames.aspx?callback=nameCallback&name=${query}&guid=${guid}`;\r\n\t\t\tremoveString = 'nameCallback(';\r\n\t\t}\r\n\t\tfetchData(url, removeString);\r\n\t};\r\n\r\n\tconst fetchData = (url, removeString) => {\r\n\t\tconst myHeaders = new Headers();\r\n\t\tmyHeaders.append('Content-Type', 'text/plain; charset=ISO-8859-1');\r\n\r\n\t\tfetch(`https://abr.business.gov.au/json/${url}`)\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.text();\r\n\t\t\t})\r\n\t\t\t.then((result) => {\r\n\t\t\t\tlet hash = result.replace(removeString, '').slice(0, -1);\r\n\t\t\t\thash = JSON.parse(hash);\r\n\t\t\t\tremoveString === 'nameCallback(' ? setFormData(hash.Names) : setFormData([ hash ]);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n                console.log(err);\r\n                setState({ isLoading: false, isError: true })\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n                setState({ isLoading: false, ...state })\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst createUniqueKey = (company) => `${company.EntityName}${company.Abn}`;\r\n\r\n\treturn (\r\n        <>\r\n            <div className=\"homepage-container\">\r\n                <h1 className=\"homepage-title\">ABN LOOKUP</h1>\r\n\r\n                <p className=\"homepage-description\">Search by ABN or name. You will need a GUID key to search.</p>\r\n\r\n                <FormPanel isError={isError} handleSubmit={handleSubmit} handleKeyPress={handleKeyPress} />\r\n\r\n                {isError ? <p className=\"error-message\">GUID Key is incorrect, please check again</p> : null}\r\n            </div>\r\n            <>\r\n                {isLoading\r\n                    ? \r\n                    <h2>LOADING...</h2>\r\n                    : <ResultsPanel data={formData} queryValue={{query}} createUniqueKey={createUniqueKey} />}\r\n            </>\r\n        </>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nimport Home from './pages/Home';\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Home />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}