{"version":3,"sources":["components/FormPanel.jsx","components/Company.jsx","components/ResultsPanel.jsx","pages/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FormPanel","guidValue","queryValue","handleSubmit","onSubmit","e","className","type","ref","required","Company","companyData","useState","isHidden","setIsHidden","onClick","Name","EntityName","stopPropagation","ignoreParentClick","Object","keys","map","key","ResultsPanel","data","createUniqueKey","length","current","value","company","defaultProps","Home","useRef","setData","isError","setIsError","isLoading","setIsLoading","nameOrABNQueryURL","removeString","url","query","guid","Number","fetchData","Headers","append","fetch","then","response","text","result","hash","replace","slice","JSON","parse","Names","catch","err","console","log","finally","resetErrorMessage","preventDefault","Abn","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f71213f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './formPanel.scss';\n\nconst FormPanel = ({ guidValue, queryValue, handleSubmit }) => {\n    return (\n        <form onSubmit={(e) => handleSubmit(e)}>\n            <div className=\"container-input\">\n                <label>GUID KEY</label>\n                <input type=\"text\" ref={guidValue} required />\n            </div>\n            <div className=\"container-input\">\n                <label>SEARCH</label>\n                <input type=\"text\" ref={queryValue} required />\n            </div>\n            <button type=\"submit\">SUBMIT</button>\n        </form>\n    );\n};\n\nFormPanel.propTypes = {\n    guidValue: PropTypes.object.isRequired,\n    queryValue: PropTypes.object.isRequired,\n    handleSubmit: PropTypes.func.isRequired\n};\n\nexport default FormPanel;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './company.scss';\n\nconst Company = ({ companyData }) => {\n    const [isHidden, setIsHidden] = useState(true);\n\n    const ignoreParentClick = (e) => {\n        e.stopPropagation();\n    };\n\n    return (\n        <li className=\"company-title\" onClick={() => setIsHidden(!isHidden)}>\n            {companyData.Name ? companyData.Name : companyData.EntityName}\n            <span className=\"toggle-icon\">{isHidden ? '+' : '-'}</span>\n\n            {!isHidden ? (\n                <ul onClick={(e) => ignoreParentClick(e)}>\n                    {Object.keys(companyData).map((key) => (\n                        <li className=\"company-details\" key={`${key} ${companyData[key]}`}>\n                            {key}: {companyData[key]}\n                        </li>\n                    ))}\n                </ul>\n            ) : null}\n        </li>\n    );\n};\n\nCompany.propTypes = {\n    companyData: PropTypes.objectOf(PropTypes.any).isRequired\n};\n\nexport default Company;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nimport Company from './Company';\nimport './resultsPanel.scss'\n\nconst ResultsPanel = ({ data, queryValue, createUniqueKey }) => {\n    return (\n        <>\n            {data ?\n                <div className=\"results-container\">\n                    <p className=\"query-message\">{data.length} RESULT{data.length !== 1 ? \"S\" : null} FOR <span className=\"query\">\"{queryValue.current.value}\"</span></p>\n                    <ul>\n                        {data.map(company => <Company companyData={company} key={createUniqueKey(company)} />)}\n                    </ul>\n                </div>\n                : null}\n        </>\n    )\n}\n\nResultsPanel.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object),\n    queryValue: PropTypes.object.isRequired,\n    createUniqueKey: PropTypes.func.isRequired\n};\n\nResultsPanel.defaultProps = {\n    data: null\n}\nexport default ResultsPanel\n","import React, { useState, useRef } from 'react';\n\nimport FormPanel from '../components/FormPanel';\nimport ResultsPanel from '../components/ResultsPanel';\nimport './home.scss';\n\nconst Home = () => {\n    const guidValue = useRef('');\n    const queryValue = useRef('');\n    const [data, setData] = useState(null);\n    const [isError, setIsError] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        resetErrorMessage()\n        setIsLoading(true);\n        nameOrABNQueryURL();\n    };\n\n    const nameOrABNQueryURL = () => {\n        let query = queryValue.current.value;\n        let guid = guidValue.current.value;\n        let removeString;\n        let url;\n\n        if (typeof Number(query) === 'number' && query.length === 11) {\n            url = `AbnDetails.aspx?callback=callback&abn=${query}&guid=${guid}`;\n            removeString = 'callback(';\n        } else {\n            url = `MatchingNames.aspx?callback=nameCallback&name=${query}&guid=${guid}`;\n            removeString = 'nameCallback(';\n        }\n        fetchData(url, removeString);\n    };\n\n    const fetchData = (url, removeString) => {\n        const myHeaders = new Headers();\n        myHeaders.append('Content-Type', 'text/plain; charset=ISO-8859-1');\n\n        fetch(`https://abr.business.gov.au/json/${url}`)\n            .then((response) => {\n                return response.text();\n            })\n            .then((result) => {\n                let hash = result.replace(removeString, '').slice(0, -1);\n                hash = JSON.parse(hash);\n                removeString === 'nameCallback(' ? setData(hash.Names) : setData([hash]);\n            })\n            .catch((err) => {\n                console.log(err);\n                setIsLoading(false);\n                setIsError(true);\n            })\n            .finally(() => {\n                setIsLoading(false);\n            });\n    };\n\n    const createUniqueKey = (company) => {\n        return company.Name ? `${company.Name}${company.Abn}` : `${company.EntityName}${company.Abn}`;\n    };\n\n    const resetErrorMessage = () => isError ? setIsError(false) : null;\n\n\n    return (\n        <>\n            <div className=\"homepage-container\">\n                <h1 className=\"homepage-title\">ABN LOOKUP</h1>\n\n                <p className=\"homepage-description\">Search by ABN or name. You will need a GUID key to search.</p>\n\n                <FormPanel isError={isError} guidValue={guidValue} queryValue={queryValue} handleSubmit={handleSubmit} />\n\n                {isError ? <p className=\"error-message\">GUID Key is incorrect, please check again</p> : null}\n            </div>\n            <>\n                {isLoading ?\n                    <h2>LOADING...</h2> : <ResultsPanel data={data} queryValue={queryValue} createUniqueKey={createUniqueKey} />}\n            </>\n        </>\n    );\n};\n\nexport default Home;\n","import React from 'react';\n\nimport Home from './pages/Home';\nimport './App.scss';\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Home />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}